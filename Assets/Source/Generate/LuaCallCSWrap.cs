//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaCallCSWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("LuaCallCS");
		L.RegFunction("GetGameObject", GetGameObject);
		L.RegFunction("GetTransform", GetTransform);
		L.RegFunction("CreateGameObject", CreateGameObject);
		L.RegFunction("GetComponent", GetComponent);
		L.RegFunction("AddComponent", AddComponent);
		L.RegFunction("Clone", Clone);
		L.RegFunction("SetPlayGameFunc", SetPlayGameFunc);
		L.RegFunction("AddClickListener", AddClickListener);
		L.RegFunction("ReleaseClickListener", ReleaseClickListener);
		L.RegFunction("AddDownListener", AddDownListener);
		L.RegFunction("ReleaseDownListener", ReleaseDownListener);
		L.RegFunction("AddUpListener", AddUpListener);
		L.RegFunction("ReleaseUpListener", ReleaseUpListener);
		L.RegFunction("AddDoubleClickListener", AddDoubleClickListener);
		L.RegFunction("ReleaseDoubleClickListener", ReleaseDoubleClickListener);
		L.RegFunction("AddLongPressListener", AddLongPressListener);
		L.RegFunction("ReleaseLongPressListener", ReleaseLongPressListener);
		L.RegFunction("TextureToCircle", TextureToCircle);
		L.RegFunction("TextureToOriginal", TextureToOriginal);
		L.RegFunction("LoadConfigData", LoadConfigData);
		L.RegFunction("GetLuaTableStr", GetLuaTableStr);
		L.RegFunction("ReadFileByteData", ReadFileByteData);
		L.RegFunction("CreateFileByBytes", CreateFileByBytes);
		L.RegFunction("CreateTxtFile", CreateTxtFile);
		L.RegFunction("SerializeData", SerializeData);
		L.RegFunction("CompressByteData", CompressByteData);
		L.RegFunction("DecompressByteData", DecompressByteData);
		L.RegFunction("EncryptByteData", EncryptByteData);
		L.RegFunction("DecryptByteData", DecryptByteData);
		L.RegFunction("GetRandomByteData", GetRandomByteData);
		L.RegFunction("SaveConfigDecryptData", SaveConfigDecryptData);
		L.RegFunction("GetAesKeyAndIvByConfigName", GetAesKeyAndIvByConfigName);
		L.RegFunction("GetKeysDataByConfigName", GetKeysDataByConfigName);
		L.RegFunction("GetConfigListKeysByName", GetConfigListKeysByName);
		L.RegFunction("GetConfigLuaTableKeysByName", GetConfigLuaTableKeysByName);
		L.RegVar("m_configPath", get_m_configPath, set_m_configPath);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			UnityEngine.GameObject o = LuaCallCS.GetGameObject(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			UnityEngine.Transform o = LuaCallCS.GetTransform(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateGameObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject o = LuaCallCS.CreateGameObject(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Object arg2 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 3);
				UnityEngine.GameObject o = LuaCallCS.CreateGameObject(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.CreateGameObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			UnityEngine.Component o = LuaCallCS.GetComponent(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddComponent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			UnityEngine.Component o = LuaCallCS.AddComponent(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				UnityEngine.GameObject o = LuaCallCS.Clone(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject o = LuaCallCS.Clone(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Object arg2 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 3);
				UnityEngine.GameObject o = LuaCallCS.Clone(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.Clone");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPlayGameFunc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			LuaCallCS.SetPlayGameFunc(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddClickListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaCallCS.AddClickListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseClickListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaCallCS.ReleaseClickListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDownListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaCallCS.AddDownListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseDownListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaCallCS.ReleaseDownListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddUpListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaCallCS.AddUpListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseUpListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaCallCS.ReleaseUpListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDoubleClickListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaCallCS.AddDoubleClickListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseDoubleClickListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaCallCS.ReleaseDoubleClickListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLongPressListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			LuaCallCS.AddLongPressListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseLongPressListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			LuaCallCS.ReleaseLongPressListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TextureToCircle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.TextureToCircle(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				LuaCallCS.TextureToCircle(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.TextureToCircle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TextureToOriginal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				LuaCallCS.TextureToOriginal(arg0);
				return 0;
			}
			else if (count == 2)
			{
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				LuaCallCS.TextureToOriginal(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.TextureToOriginal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadConfigData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				LuaInterface.LuaTable o = LuaCallCS.LoadConfigData(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				LuaInterface.LuaTable o = LuaCallCS.LoadConfigData(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.IO.DirectoryInfo arg0 = (System.IO.DirectoryInfo)ToLua.CheckObject(L, 1, typeof(System.IO.DirectoryInfo));
				string arg1 = ToLua.CheckString(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				LuaInterface.LuaTable o = LuaCallCS.LoadConfigData(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.LoadConfigData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLuaTableStr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IO.FileStream arg0 = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			string o = LuaCallCS.GetLuaTableStr(arg0, arg1, arg2);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFileByteData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<System.IO.FileStream>(L, 1))
			{
				System.IO.FileStream arg0 = (System.IO.FileStream)ToLua.ToObject(L, 1);
				byte[] o = LuaCallCS.ReadFileByteData(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				byte[] o = LuaCallCS.ReadFileByteData(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.ReadFileByteData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateFileByBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			LuaCallCS.CreateFileByBytes(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateTxtFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			LuaCallCS.CreateTxtFile(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SerializeData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			byte[] o = LuaCallCS.SerializeData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompressByteData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] o = LuaCallCS.CompressByteData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecompressByteData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] o = LuaCallCS.DecompressByteData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncryptByteData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
			byte[] o = LuaCallCS.EncryptByteData(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecryptByteData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
			byte[] o = LuaCallCS.DecryptByteData(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRandomByteData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			byte[] o = LuaCallCS.GetRandomByteData(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveConfigDecryptData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			object arg0 = ToLua.ToVarObject(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			LuaCallCS.SaveConfigDecryptData(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAesKeyAndIvByConfigName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			byte[] arg1 = null;
			byte[] arg2 = null;
			bool o = LuaCallCS.GetAesKeyAndIvByConfigName(arg0, out arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			ToLua.Push(L, arg2);
			return 3;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetKeysDataByConfigName(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<string> arg1 = null;
				int arg2;
				bool o = LuaCallCS.GetKeysDataByConfigName(arg0, out arg1, out arg2);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushSealed(L, arg1);
				LuaDLL.lua_pushinteger(L, arg2);
				return 3;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Collections.Generic.List<string> arg1 = null;
				int arg2;
				string arg3 = ToLua.CheckString(L, 4);
				bool o = LuaCallCS.GetKeysDataByConfigName(arg0, out arg1, out arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushSealed(L, arg1);
				LuaDLL.lua_pushinteger(L, arg2);
				return 3;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaCallCS.GetKeysDataByConfigName");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConfigListKeysByName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			System.Collections.Generic.List<string> o = LuaCallCS.GetConfigListKeysByName(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConfigLuaTableKeysByName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			LuaInterface.LuaTable o = LuaCallCS.GetConfigLuaTableKeysByName(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_configPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaCallCS.m_configPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_configPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaCallCS.m_configPath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

